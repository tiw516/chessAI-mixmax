import java.util.*;

public class minmax {
	private static final int DEPTH = 1;
	private int numTurns;
	
	
	public String makeMove(map m){
		move bestmove;
		int bestmovescore;
		
		ArrayList<map> possiblemap = new ArrayList<map>();
		ArrayList<move> moves = new ArrayList<move>();
		
		for (int a=0; a<5; a++){
			for (int b=0; b<5; b++){
				if (m.haspiece(a, b)){
					piece p = m.getpiece(a, b);
					if (p.checkteam()==true){
						for (int c=0; c<5; c++){
							for (int d=0; d<5; d++){
								if (p.checkmove(c, d, m)){
									move movement = new move(a,b,c,d,p);
									moves.add(movement);
									map newmap = new map(m);
//									doMove(newmap, movement);
									possiblemap.add(newmap);
								}
							}
						}
					}
/*					else if (p.checkteam() == false){              ///when the dragon moves, really need?
						for (int c=0; c<5; c++){
							for (int d=0; d<5; d++){
								if (p.checkmove(c, d, m)){
									
								}
							}
						}
					}
*/				}
			}
		}
		bestmove = moves.get(0);
		bestmovescore = evaluatePosition(possiblemap.get(0), Integer.MIN_VALUE, Integer.MAX_VALUE, DEPTH, false);
			
		if(numTurns>0){
			for (int a=1; a<possiblemap.size(); a++){
				int b = evaluatePosition(possiblemap.get(a), Integer.MIN_VALUE, Integer.MAX_VALUE, DEPTH, false);
				if (b >= bestmovescore){
					bestmove = moves.get(a);
					bestmovescore = b;
				}
			}
		}
		else{
			Random generator = new Random();
			int index = generator.nextInt(moves.size());
			bestmove = moves.get(index);
		}
		numTurns++;
		return doMove(m, bestmove);
	}
	
	
	public String doMove(map m, move moveToMake){
//		final String[] columns = {"A","B","C","D","E"};
		piece pieceTomove = moveToMake.getPiece();
		if (pieceTomove.getType() == "K"){
			if (pieceTomove.checksurround(pieceTomove.getX(), pieceTomove.getY(), m) >=2){
				String text = "dragon is closing";
				return text;
			}
			for (int a=0; a<5;a++){
				if (pieceTomove.checkmove(4, a, m)){
					String text = "King is approaching to win";
					return text;
				}
			}
		}
		m.clear(moveToMake.getNewY(), moveToMake.getOldY());
		m.setpiece(moveToMake.getNewX(), moveToMake.getNewY(), pieceTomove);
		pieceTomove.setlocation(moveToMake.getNewX(), moveToMake.getNewY());
		String text = pieceTomove.getType() + "is moving to: " + moveToMake.getNewX() +  (moveToMake.getNewY()+1) + "\n";
		return text;
	}
	
	
	public int evaluatePosition(map m, int alpha, int beta, int depth, boolean human){
//		System.out.println("Begin evaluating position: depth-" + depth + "for- "+ human);
		if (depth == 0){
			int evaluation = evaluate(m);
			return evaluation;
		}
		
		if (human == true){
			ArrayList<move> moves = new ArrayList<move>();
			for (int a=0; a<5; a++){
				for (int b=0; b<5; b++){
					if (m.haspiece(a, b)){
						piece p = m.getpiece(a, b);
						if (p.checkteam()==true){
							for (int c=0; c<5; c++){
								for (int d=0; d<5; d++){
									if (p.checkmove(c, d, m)){
										moves.add(new move(a,b,c,d,p));
									}
								}
							}
						}
					}
				}
			}
		
		
			int newBeta = beta;
			for (move move : moves){
				map successormap = new map(m);
//				doMove
				newBeta = Math.min(newBeta, evaluatePosition(successormap, alpha, beta,depth-1,!human));
				if (newBeta <= alpha) break;
			}
			return newBeta;
		}
		else {
			ArrayList<move> moves = new ArrayList<move>();
			for (int a=0; a<5; a++){
				for (int b=0; b<5; b++){
					if (m.haspiece(a, b)){
						if (m.getpiece(a, b).checkteam() == true){
							piece p = m.getpiece(a, b);
							for (int c=0; c<5; c++){
								for (int d=0; d<5; d++){
									if (p.checkmove(c, d, m));{
										moves.add(new move(a,b,c,d,p));
									}
								}
							}
						}
					}
				}
			}
			int newAlpha = alpha;
			for (move move : moves){
				map successormap = new map(m);
//				domove
				newAlpha = Math.max(newAlpha, evaluatePosition(successormap, alpha, beta, depth-1,!human));
				if (beta<=newAlpha) break;
			}
			return newAlpha;
		}
	}
	
	
	public int evaluate(map m){
		int humancore = 0;
		int dragoncore = 0;
		
		for (int a=0; a<5; a++){
			for (int b=0; b<5; b++){
				if (m.haspiece(a, b)){
					if (m.getpiece(a, b).getType() == "D"){
						if (m.getpiece(a, b).checkteam() == true){
							dragoncore -= 1;
						}
						else {
							dragoncore += 3;
						}
					}
					else if (m.getpiece(a, b).getType() == "K"){
						humancore += 5;
					}
					else {
						humancore += 2;
					}
				}
			}
		}
		return humancore-dragoncore;
	}
}
